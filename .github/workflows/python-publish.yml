name: Publish Python Package

on:
  release:
    types: [published]

concurrency:
  group: deploy-${{ github.ref }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_ENV
        shell: bash
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Node dependencies
        run: npm ci
      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        shell: bash
      - run: npx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        shell: bash
      - name: Start test server
        run: docker compose up --detach --wait flask
      - name: Run fixture tests
        run: node test/test-fixtures.mjs || exit 1
      - name: Run Playwright tests
        run: npx playwright test
      - name: Run Python tests
        run: docker compose exec flask poetry run python -m pytest

  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    environment: production
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
